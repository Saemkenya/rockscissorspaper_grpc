// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/rps.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Medal int32

const (
	Medal_Essene  Medal = 0
	Medal_Gold    Medal = 1
	Medal_Charm   Medal = 2
	Medal_NoMedal Medal = 3
)

var Medal_name = map[int32]string{
	0: "Essene",
	1: "Gold",
	2: "Charm",
	3: "NoMedal",
}

var Medal_value = map[string]int32{
	"Essene":  0,
	"Gold":    1,
	"Charm":   2,
	"NoMedal": 3,
}

func (x Medal) String() string {
	return proto.EnumName(Medal_name, int32(x))
}

func (Medal) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bc7a723899773f80, []int{0}
}

type Player struct {
	Name                 string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Lives                int64           `protobuf:"varint,2,opt,name=lives,proto3" json:"lives,omitempty"`
	Medals               map[int32]Medal `protobuf:"bytes,3,rep,name=medals,proto3" json:"medals,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=proto.Medal"`
	Wins                 Medal           `protobuf:"varint,4,opt,name=wins,proto3,enum=proto.Medal" json:"wins,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Player) Reset()         { *m = Player{} }
func (m *Player) String() string { return proto.CompactTextString(m) }
func (*Player) ProtoMessage()    {}
func (*Player) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc7a723899773f80, []int{0}
}

func (m *Player) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Player.Unmarshal(m, b)
}
func (m *Player) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Player.Marshal(b, m, deterministic)
}
func (m *Player) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player.Merge(m, src)
}
func (m *Player) XXX_Size() int {
	return xxx_messageInfo_Player.Size(m)
}
func (m *Player) XXX_DiscardUnknown() {
	xxx_messageInfo_Player.DiscardUnknown(m)
}

var xxx_messageInfo_Player proto.InternalMessageInfo

func (m *Player) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Player) GetLives() int64 {
	if m != nil {
		return m.Lives
	}
	return 0
}

func (m *Player) GetMedals() map[int32]Medal {
	if m != nil {
		return m.Medals
	}
	return nil
}

func (m *Player) GetWins() Medal {
	if m != nil {
		return m.Wins
	}
	return Medal_Essene
}

type Choice struct {
	Chosen               string   `protobuf:"bytes,1,opt,name=chosen,proto3" json:"chosen,omitempty"`
	Player               *Player  `protobuf:"bytes,2,opt,name=player,proto3" json:"player,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Choice) Reset()         { *m = Choice{} }
func (m *Choice) String() string { return proto.CompactTextString(m) }
func (*Choice) ProtoMessage()    {}
func (*Choice) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc7a723899773f80, []int{1}
}

func (m *Choice) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Choice.Unmarshal(m, b)
}
func (m *Choice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Choice.Marshal(b, m, deterministic)
}
func (m *Choice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Choice.Merge(m, src)
}
func (m *Choice) XXX_Size() int {
	return xxx_messageInfo_Choice.Size(m)
}
func (m *Choice) XXX_DiscardUnknown() {
	xxx_messageInfo_Choice.DiscardUnknown(m)
}

var xxx_messageInfo_Choice proto.InternalMessageInfo

func (m *Choice) GetChosen() string {
	if m != nil {
		return m.Chosen
	}
	return ""
}

func (m *Choice) GetPlayer() *Player {
	if m != nil {
		return m.Player
	}
	return nil
}

type OutCome struct {
	Result               Medal    `protobuf:"varint,1,opt,name=result,proto3,enum=proto.Medal" json:"result,omitempty"`
	Winner               *Player  `protobuf:"bytes,2,opt,name=winner,proto3" json:"winner,omitempty"`
	Looser               *Player  `protobuf:"bytes,3,opt,name=looser,proto3" json:"looser,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OutCome) Reset()         { *m = OutCome{} }
func (m *OutCome) String() string { return proto.CompactTextString(m) }
func (*OutCome) ProtoMessage()    {}
func (*OutCome) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc7a723899773f80, []int{2}
}

func (m *OutCome) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OutCome.Unmarshal(m, b)
}
func (m *OutCome) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OutCome.Marshal(b, m, deterministic)
}
func (m *OutCome) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutCome.Merge(m, src)
}
func (m *OutCome) XXX_Size() int {
	return xxx_messageInfo_OutCome.Size(m)
}
func (m *OutCome) XXX_DiscardUnknown() {
	xxx_messageInfo_OutCome.DiscardUnknown(m)
}

var xxx_messageInfo_OutCome proto.InternalMessageInfo

func (m *OutCome) GetResult() Medal {
	if m != nil {
		return m.Result
	}
	return Medal_Essene
}

func (m *OutCome) GetWinner() *Player {
	if m != nil {
		return m.Winner
	}
	return nil
}

func (m *OutCome) GetLooser() *Player {
	if m != nil {
		return m.Looser
	}
	return nil
}

type RPSProto struct {
	Player               []*Player `protobuf:"bytes,1,rep,name=player,proto3" json:"player,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RPSProto) Reset()         { *m = RPSProto{} }
func (m *RPSProto) String() string { return proto.CompactTextString(m) }
func (*RPSProto) ProtoMessage()    {}
func (*RPSProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc7a723899773f80, []int{3}
}

func (m *RPSProto) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RPSProto.Unmarshal(m, b)
}
func (m *RPSProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RPSProto.Marshal(b, m, deterministic)
}
func (m *RPSProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPSProto.Merge(m, src)
}
func (m *RPSProto) XXX_Size() int {
	return xxx_messageInfo_RPSProto.Size(m)
}
func (m *RPSProto) XXX_DiscardUnknown() {
	xxx_messageInfo_RPSProto.DiscardUnknown(m)
}

var xxx_messageInfo_RPSProto proto.InternalMessageInfo

func (m *RPSProto) GetPlayer() []*Player {
	if m != nil {
		return m.Player
	}
	return nil
}

func init() {
	proto.RegisterEnum("proto.Medal", Medal_name, Medal_value)
	proto.RegisterType((*Player)(nil), "proto.Player")
	proto.RegisterMapType((map[int32]Medal)(nil), "proto.Player.MedalsEntry")
	proto.RegisterType((*Choice)(nil), "proto.Choice")
	proto.RegisterType((*OutCome)(nil), "proto.OutCome")
	proto.RegisterType((*RPSProto)(nil), "proto.RPSProto")
}

func init() { proto.RegisterFile("proto/rps.proto", fileDescriptor_bc7a723899773f80) }

var fileDescriptor_bc7a723899773f80 = []byte{
<<<<<<< HEAD
<<<<<<< HEAD
	// 397 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x51, 0x51, 0x8b, 0xd3, 0x40,
	0x10, 0x76, 0x9b, 0x64, 0xef, 0x6e, 0xa2, 0x35, 0x0c, 0x22, 0xf1, 0x9e, 0x4a, 0x50, 0x38, 0x3c,
	0xe9, 0xd9, 0x88, 0x20, 0xbe, 0x49, 0x29, 0x7d, 0x52, 0xc3, 0xf6, 0x17, 0xc4, 0x74, 0xa1, 0xa1,
	0x69, 0x36, 0xec, 0xa6, 0x95, 0x3e, 0xf8, 0xf3, 0x7c, 0xf7, 0x27, 0xb9, 0x99, 0x4d, 0xd1, 0x96,
	0x1e, 0x7d, 0xca, 0xcc, 0x7e, 0xdf, 0x7c, 0xf3, 0xcd, 0x17, 0x78, 0xde, 0x68, 0xd5, 0xaa, 0x07,
	0xdd, 0x98, 0x31, 0x55, 0x18, 0xd0, 0x27, 0xf9, 0xc3, 0x80, 0x67, 0x55, 0xbe, 0x97, 0x1a, 0x11,
	0xfc, 0x3a, 0xdf, 0xc8, 0x98, 0x8d, 0xd8, 0xdd, 0x8d, 0xa0, 0x1a, 0x5f, 0x40, 0x50, 0x95, 0x3b,
	0x69, 0xe2, 0x81, 0x7d, 0xf4, 0x84, 0x6b, 0x70, 0x02, 0x7c, 0x23, 0x97, 0x79, 0x65, 0x62, 0x6f,
	0xe4, 0xdd, 0x85, 0xe9, 0x2b, 0xa7, 0x39, 0x76, 0x42, 0xe3, 0xaf, 0x84, 0xcd, 0xea, 0x56, 0xef,
	0x45, 0x4f, 0xc4, 0x11, 0xf8, 0x3f, 0xcb, 0xda, 0xc4, 0xbe, 0xd5, 0x19, 0xa6, 0x4f, 0xfb, 0x01,
	0x62, 0x0a, 0x42, 0x6e, 0xe7, 0x10, 0xfe, 0x37, 0x88, 0x11, 0x78, 0x6b, 0xb9, 0x27, 0x33, 0x81,
	0xe8, 0x4a, 0x4c, 0x20, 0xd8, 0xe5, 0xd5, 0x56, 0x92, 0x97, 0x53, 0x0d, 0x07, 0x7d, 0x1e, 0x7c,
	0x62, 0xc9, 0x1c, 0xf8, 0x74, 0xa5, 0xca, 0x42, 0xe2, 0x4b, 0xe0, 0xc5, 0x4a, 0x19, 0x59, 0xf7,
	0x37, 0xf5, 0x1d, 0xbe, 0x01, 0xde, 0x90, 0x55, 0x92, 0x0a, 0xd3, 0x67, 0x47, 0xfe, 0x45, 0x0f,
	0x26, 0xbf, 0xe0, 0xea, 0xfb, 0xb6, 0x9d, 0x2a, 0x9b, 0xc3, 0x6b, 0xe0, 0x5a, 0x9a, 0x6d, 0xd5,
	0x92, 0xd2, 0xe9, 0xf2, 0x1e, 0xeb, 0x74, 0xed, 0x29, 0xf5, 0xa3, 0xba, 0x0e, 0xec, 0x68, 0x95,
	0xb2, 0x46, 0xb4, 0x8d, 0xef, 0x1c, 0xcd, 0x81, 0xc9, 0x04, 0xae, 0x45, 0xb6, 0xc8, 0xe8, 0x6f,
	0xfd, 0x73, 0xcc, 0x28, 0xf1, 0xf3, 0x8e, 0xdf, 0x7e, 0x84, 0x80, 0x1c, 0x21, 0x00, 0x9f, 0x19,
	0x7b, 0xaa, 0x8c, 0x9e, 0xe0, 0x35, 0xf8, 0x73, 0x55, 0x2d, 0x23, 0x86, 0x37, 0x10, 0x4c, 0x57,
	0xb9, 0xde, 0x44, 0x03, 0x0c, 0xe1, 0xea, 0x9b, 0x22, 0x6e, 0xe4, 0xa5, 0xbf, 0x19, 0x80, 0x5d,
	0xb5, 0x90, 0x7a, 0xd7, 0xc5, 0x76, 0x0f, 0x60, 0x03, 0xb4, 0x1e, 0x84, 0x2a, 0xd6, 0x78, 0x58,
	0xe5, 0x32, 0xbd, 0x1d, 0xf6, 0xed, 0x21, 0x99, 0x77, 0x10, 0x3a, 0x72, 0x96, 0x37, 0xf6, 0xb6,
	0x0b, 0xec, 0x07, 0x18, 0x3a, 0xf6, 0xa2, 0x28, 0x8d, 0x51, 0xda, 0x5c, 0x1a, 0xb8, 0xa7, 0x10,
	0xbe, 0x68, 0x59, 0xe7, 0x78, 0x7c, 0xf4, 0x29, 0xf5, 0x3d, 0xfb, 0xc1, 0xe9, 0xe1, 0xc3, 0xdf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x0f, 0x3a, 0xf6, 0xed, 0x02, 0x00, 0x00,
=======
=======
>>>>>>> afd465589d7e2faea480ac200553d7e8f827d904
	// 398 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x51, 0x6b, 0xd4, 0x40,
	0x10, 0xc7, 0xdd, 0xcb, 0x65, 0xdb, 0x4e, 0xf4, 0x0c, 0x83, 0x48, 0xec, 0x53, 0x08, 0x0a, 0x87,
	0x95, 0xab, 0x3d, 0x11, 0xc4, 0x37, 0x39, 0xca, 0x3d, 0xa9, 0x61, 0xef, 0x13, 0xc4, 0x74, 0x20,
	0xa1, 0xc9, 0x6e, 0xd8, 0xcd, 0x5d, 0xb9, 0x07, 0x3f, 0x9e, 0xef, 0x7e, 0x24, 0xc9, 0x6c, 0x8a,
	0xf6, 0xa8, 0xdc, 0x53, 0x66, 0xf2, 0xff, 0xcd, 0x7f, 0xff, 0x3b, 0x0b, 0xcf, 0x3b, 0x6b, 0x7a,
	0x73, 0x69, 0x3b, 0xb7, 0xe0, 0x0a, 0x43, 0xfe, 0x64, 0xbf, 0x05, 0xc8, 0xbc, 0x29, 0xf6, 0x64,
	0x11, 0x61, 0xaa, 0x8b, 0x96, 0x12, 0x91, 0x8a, 0xf9, 0x99, 0xe2, 0x1a, 0x5f, 0x40, 0xd8, 0xd4,
	0x3b, 0x72, 0xc9, 0x24, 0x15, 0xf3, 0x40, 0xf9, 0x06, 0xaf, 0x40, 0xb6, 0x74, 0x53, 0x34, 0x2e,
	0x09, 0xd2, 0x60, 0x1e, 0x2d, 0x5f, 0x79, 0xcf, 0x85, 0x37, 0x5a, 0x7c, 0x65, 0xed, 0x5a, 0xf7,
	0x76, 0xaf, 0x46, 0x10, 0x53, 0x98, 0xde, 0xd5, 0xda, 0x25, 0xd3, 0x54, 0xcc, 0x67, 0xcb, 0xa7,
	0xe3, 0x00, 0x93, 0x8a, 0x95, 0xf3, 0x35, 0x44, 0xff, 0x0c, 0x62, 0x0c, 0xc1, 0x2d, 0xed, 0x39,
	0x4c, 0xa8, 0x86, 0x12, 0x33, 0x08, 0x77, 0x45, 0xb3, 0x25, 0xce, 0x72, 0xe8, 0xe1, 0xa5, 0xcf,
	0x93, 0x4f, 0x22, 0x5b, 0x83, 0x5c, 0x55, 0xa6, 0x2e, 0x09, 0x5f, 0x82, 0x2c, 0x2b, 0xe3, 0x48,
	0x8f, 0x77, 0x1a, 0x3b, 0x7c, 0x03, 0xb2, 0xe3, 0xa8, 0x6c, 0x15, 0x2d, 0x9f, 0x3d, 0xc8, 0xaf,
	0x46, 0x31, 0xfb, 0x09, 0x27, 0xdf, 0xb7, 0xfd, 0xca, 0xb4, 0x84, 0xaf, 0x41, 0x5a, 0x72, 0xdb,
	0xa6, 0x67, 0xa7, 0xc3, 0xc3, 0x47, 0x6d, 0xf0, 0xbd, 0xab, 0xb5, 0xfe, 0xaf, 0xaf, 0x17, 0x07,
	0xac, 0x31, 0xc6, 0x91, 0x4d, 0x82, 0x47, 0x31, 0x2f, 0x66, 0x57, 0x70, 0xaa, 0xf2, 0x4d, 0xce,
	0xaf, 0xf5, 0x37, 0xb1, 0xe0, 0x8d, 0x3f, 0x9e, 0xf8, 0xed, 0x47, 0x08, 0x39, 0x11, 0x02, 0xc8,
	0x6b, 0xe7, 0x48, 0x53, 0xfc, 0x04, 0x4f, 0x61, 0xba, 0x36, 0xcd, 0x4d, 0x2c, 0xf0, 0x0c, 0xc2,
	0x55, 0x55, 0xd8, 0x36, 0x9e, 0x60, 0x04, 0x27, 0xdf, 0x0c, 0xb3, 0x71, 0xb0, 0xfc, 0x25, 0x00,
	0x54, 0xbe, 0xd9, 0x90, 0xdd, 0x0d, 0x6b, 0xbb, 0x00, 0x58, 0x55, 0x43, 0x06, 0x65, 0xca, 0x5b,
	0xbc, 0x3f, 0xca, 0xef, 0xf4, 0x7c, 0x36, 0xb6, 0xf7, 0x9b, 0x79, 0x07, 0x91, 0x87, 0xf3, 0xa2,
	0x23, 0x7b, 0x8c, 0xbe, 0x84, 0x99, 0xa7, 0x37, 0x65, 0xed, 0x9c, 0xb1, 0xee, 0xd8, 0xc0, 0x05,
	0x2f, 0xe1, 0x8b, 0x25, 0x5d, 0xe0, 0xc3, 0x4b, 0x1f, 0xa2, 0xef, 0xc5, 0x0f, 0xc9, 0x3f, 0x3e,
	0xfc, 0x09, 0x00, 0x00, 0xff, 0xff, 0x00, 0x0f, 0x3a, 0xf6, 0xed, 0x02, 0x00, 0x00,
<<<<<<< HEAD
>>>>>>> afd465589d7e2faea480ac200553d7e8f827d904
=======
>>>>>>> afd465589d7e2faea480ac200553d7e8f827d904
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RPSServiceClient is the client API for RPSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPSServiceClient interface {
	ChooseRock(ctx context.Context, in *Choice, opts ...grpc.CallOption) (*OutCome, error)
	ChoosePaper(ctx context.Context, in *Choice, opts ...grpc.CallOption) (*OutCome, error)
	ChooseScissors(ctx context.Context, in *Choice, opts ...grpc.CallOption) (*OutCome, error)
	RPSArena(ctx context.Context, in *Player, opts ...grpc.CallOption) (RPSService_RPSArenaClient, error)
}

type rPSServiceClient struct {
	cc *grpc.ClientConn
}

func NewRPSServiceClient(cc *grpc.ClientConn) RPSServiceClient {
	return &rPSServiceClient{cc}
}

func (c *rPSServiceClient) ChooseRock(ctx context.Context, in *Choice, opts ...grpc.CallOption) (*OutCome, error) {
	out := new(OutCome)
	err := c.cc.Invoke(ctx, "/proto.RPSService/ChooseRock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPSServiceClient) ChoosePaper(ctx context.Context, in *Choice, opts ...grpc.CallOption) (*OutCome, error) {
	out := new(OutCome)
	err := c.cc.Invoke(ctx, "/proto.RPSService/ChoosePaper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPSServiceClient) ChooseScissors(ctx context.Context, in *Choice, opts ...grpc.CallOption) (*OutCome, error) {
	out := new(OutCome)
	err := c.cc.Invoke(ctx, "/proto.RPSService/ChooseScissors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPSServiceClient) RPSArena(ctx context.Context, in *Player, opts ...grpc.CallOption) (RPSService_RPSArenaClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RPSService_serviceDesc.Streams[0], "/proto.RPSService/RPSArena", opts...)
	if err != nil {
		return nil, err
	}
	x := &rPSServiceRPSArenaClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RPSService_RPSArenaClient interface {
	Recv() (*OutCome, error)
	grpc.ClientStream
}

type rPSServiceRPSArenaClient struct {
	grpc.ClientStream
}

func (x *rPSServiceRPSArenaClient) Recv() (*OutCome, error) {
	m := new(OutCome)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RPSServiceServer is the server API for RPSService service.
type RPSServiceServer interface {
	ChooseRock(context.Context, *Choice) (*OutCome, error)
	ChoosePaper(context.Context, *Choice) (*OutCome, error)
	ChooseScissors(context.Context, *Choice) (*OutCome, error)
	RPSArena(*Player, RPSService_RPSArenaServer) error
}

// UnimplementedRPSServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRPSServiceServer struct {
}

func (*UnimplementedRPSServiceServer) ChooseRock(ctx context.Context, req *Choice) (*OutCome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChooseRock not implemented")
}
func (*UnimplementedRPSServiceServer) ChoosePaper(ctx context.Context, req *Choice) (*OutCome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChoosePaper not implemented")
}
func (*UnimplementedRPSServiceServer) ChooseScissors(ctx context.Context, req *Choice) (*OutCome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChooseScissors not implemented")
}
func (*UnimplementedRPSServiceServer) RPSArena(req *Player, srv RPSService_RPSArenaServer) error {
	return status.Errorf(codes.Unimplemented, "method RPSArena not implemented")
}

func RegisterRPSServiceServer(s *grpc.Server, srv RPSServiceServer) {
	s.RegisterService(&_RPSService_serviceDesc, srv)
}

func _RPSService_ChooseRock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Choice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPSServiceServer).ChooseRock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RPSService/ChooseRock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPSServiceServer).ChooseRock(ctx, req.(*Choice))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPSService_ChoosePaper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Choice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPSServiceServer).ChoosePaper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RPSService/ChoosePaper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPSServiceServer).ChoosePaper(ctx, req.(*Choice))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPSService_ChooseScissors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Choice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPSServiceServer).ChooseScissors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RPSService/ChooseScissors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPSServiceServer).ChooseScissors(ctx, req.(*Choice))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPSService_RPSArena_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Player)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RPSServiceServer).RPSArena(m, &rPSServiceRPSArenaServer{stream})
}

type RPSService_RPSArenaServer interface {
	Send(*OutCome) error
	grpc.ServerStream
}

type rPSServiceRPSArenaServer struct {
	grpc.ServerStream
}

func (x *rPSServiceRPSArenaServer) Send(m *OutCome) error {
	return x.ServerStream.SendMsg(m)
}

var _RPSService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RPSService",
	HandlerType: (*RPSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChooseRock",
			Handler:    _RPSService_ChooseRock_Handler,
		},
		{
			MethodName: "ChoosePaper",
			Handler:    _RPSService_ChoosePaper_Handler,
		},
		{
			MethodName: "ChooseScissors",
			Handler:    _RPSService_ChooseScissors_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RPSArena",
			Handler:       _RPSService_RPSArena_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/rps.proto",
}
